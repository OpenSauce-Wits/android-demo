apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
	toolVersion = "$jacocoVersion"
}

tasks.withType( Test) {
	jacoco.includeNoLocationClasses = true
}

task jacocoTestReport( type: JacocoReport, dependsOn: [ 'testDebugUnitTest', 'createDebugCoverageReport']) {
	reports {
		xml.enabled = true
		html.enabled = true
	}

	def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
	def debugTree = fileTree ( dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
	def mainSrc = "$project.projectDir/src/main/java"

	def sourceDirectories = files([ mainSrc])
	def classDirectories = files([ debugTree])
	def executionData = fileTree( dir: project.buildDir, includes: [ 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
}

android {
	compileSdkVersion 28
	defaultConfig {
		applicationId "com.example.android_demo"
		minSdkVersion 25
		targetSdkVersion 28
		//VersionCode 1
		versionName "1.0"
	}
	
	buildTypes {
		debug {
			testCoverageEnabled  true
		}
		/*release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}*/
	}
	testOptions {
		/*execution 'ANDROID_TEST_ORCHESTRATOR'*/
		animationsDisabled true
		
		unitTests {
			includeAndroidResources = true
		}
	}
}

dependencies {
	implementation 'com.android.support.constraint:constraint-layout:1.1.3'
	implementation 'com.android.support:appcompat-v7:28.0.0'
	testImplementation 'junit:junit:4.12'
}
